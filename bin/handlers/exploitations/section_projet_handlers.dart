import 'dart:convert';

import 'package:shelf/shelf.dart';
import 'package:shelf_router/shelf_router.dart';
 
import '../../models/exploitations/section_projet_model.dart';
import '../../repository/repository.dart';

class SectionProjetHandlers {
  final Repository repos;

  SectionProjetHandlers(this.repos);

  Router get router {
    final router = Router();

    router.get('/', (Request request) async {
      List<SectionProjetModel> data = await repos.sectionProjets.getAllData();
      return Response.ok(jsonEncode(data));
    });

    router.get('/<id>', (Request request, String id) async {
      late SectionProjetModel agent;
      try {
        agent = await repos.sectionProjets.getFromId(int.parse(id));
      } catch (e) {
        print(e);
        return Response(404);
      }
      return Response.ok(jsonEncode(agent.toJson()));
    });

    router.post('/insert-new-section-projet', (Request request) async {
      var input = jsonDecode(await request.readAsString());

      SectionProjetModel data = SectionProjetModel(
        nomProjet: input['nomProjet'],
        reference: input['reference'],
        section: input['section'],
        detail: input['detail'],
        signature: input['signature'],
        created: DateTime.parse(input['created']),
      );
      try {
        await repos.sectionProjets.insertData(data);
      } catch (e) {
        print(e);
        return Response(422);
      }
      return Response.ok(jsonEncode(data.toJson()));
    });

    router.put('/update-section-projet/', (Request request) async {
       dynamic input = jsonDecode(await request.readAsString());
      final editH = SectionProjetModel.fromJson(input);
      SectionProjetModel? data =
          await repos.sectionProjets.getFromId(editH.id!); 

      if (input['nomProjet'] != null) {
        data.nomProjet = input['nomProjet'];
      }
      if (input['reference'] != null) {
        data.reference = input['reference'];
      }
      if (input['section'] != null) {
        data.section = input['section'];
      }
      if (input['detail'] != null) {
        data.detail = input['detail'];
      }
      if (input['signature'] != null) {
        data.signature = input['signature'];
      } 
      if (input['created'] != null) {
        data.created = DateTime.parse(input['created']);
      } 
      repos.sectionProjets.update(data);
      return Response.ok(jsonEncode(data.toJson()));
    });

    router.delete('/delete-section-projet/<id>', (Request request, String id) async {
      var id = request.params['id'];
      repos.sectionProjets.deleteData(int.parse(id!));
      return Response.ok('Supprimée');
    });

    router.all(
      '/<ignored|.*>',
      (Request request) =>
          Response.notFound('La Page section projet n\'est pas trouvé'),
    );

    return router;
  }
}
