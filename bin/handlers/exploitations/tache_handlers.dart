import 'dart:convert';

import 'package:shelf/shelf.dart';
import 'package:shelf_router/shelf_router.dart';

import '../../models/exploitations/tache_model.dart';
import '../../repository/repository.dart';

class TacheHanlers {
  final Repository repos;

  TacheHanlers(this.repos);

  Router get router {
    final router = Router();

    router.get('/', (Request request) async {
      List<TacheModel> data = await repos.taches.getAllData();
      return Response.ok(jsonEncode(data));
    });

    router.get('/<id>', (Request request, String id) async {
      late TacheModel agent;
      try {
        agent = await repos.taches.getFromId(int.parse(id));
      } catch (e) {
        print(e);
        return Response(404);
      }
      return Response.ok(jsonEncode(agent.toJson()));
    });

    router.post('/insert-new-tache', (Request request) async {
      var input = jsonDecode(await request.readAsString());

      TacheModel data = TacheModel(
          nomProjet: input['nomProjet'],
          numeroTache: input['numeroTache'],
          agent: input['agent'],
          jalon: input['jalon'],
          tache: input['tache'],
          signatureResp: input['signatureResp'],
          created: DateTime.parse(input['created']),
          read: input['read']);
      try {
        await repos.taches.insertData(data);
      } catch (e) {
        print(e);
        return Response(422);
      }
      return Response.ok(jsonEncode(data.toJson()));
    });

    router.put('/update-tache/', (Request request) async {
       dynamic input = jsonDecode(await request.readAsString());
      final editH = TacheModel.fromJson(input);
      TacheModel? data =
          await repos.taches.getFromId(editH.id!); 

      if (input['nomProjet'] != null) {
        data.nomProjet = input['nomProjet'];
      }
      if (input['numeroTache'] != null) {
        data.numeroTache = input['numeroTache'];
      }
      if (input['agent'] != null) {
        data.agent = input['agent'];
      }
      if (input['jalon'] != null) {
        data.jalon = input['jalon'];
      }
      if (input['tache'] != null) {
        data.tache = input['tache'];
      }
      if (input['signatureResp'] != null) {
        data.signatureResp = input['signatureResp'];
      }
      if (input['created'] != null) {
        data.created = DateTime.parse(input['created']);
      }
      if (input['read'] != null) {
        data.read = input['read'];
      }

      repos.taches.update(data);
      return Response.ok(jsonEncode(data.toJson()));
    });

    router.delete('/delete-tache/<id>', (Request request, String id) async {
      var id = request.params['id'];
      repos.taches.deleteData(int.parse(id!));
      return Response.ok('Supprimée');
    });

    router.all(
      '/<ignored|.*>',
      (Request request) => Response.notFound('La Page tache n\'est pas trouvé'),
    );

    return router;
  }
}
