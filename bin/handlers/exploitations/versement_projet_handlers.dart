import 'dart:convert';

import 'package:shelf/shelf.dart';
import 'package:shelf_router/shelf_router.dart';

import '../../models/exploitations/versement_projet_model.dart';
import '../../repository/repository.dart';

class VersementProjetHandlers {
  final Repository repos;

  VersementProjetHandlers(this.repos);

  Router get router {
    final router = Router();

    router.get('/', (Request request) async {
      List<VersementProjetModel> data =
          await repos.versementProjets.getAllData();
      return Response.ok(jsonEncode(data));
    });

    router.get('/<id>', (Request request, String id) async {
      late VersementProjetModel agent;
      try {
        agent = await repos.versementProjets.getFromId(int.parse(id));
      } catch (e) {
        print(e);
        return Response(404);
      }
      return Response.ok(jsonEncode(agent.toJson()));
    });

    router.post('/insert-new-versement-projet', (Request request) async {
      var input = jsonDecode(await request.readAsString());

      VersementProjetModel data = VersementProjetModel(
        nomProjet: input['nomProjet'],
        pieceJustificative: input['pieceJustificative'],
        montantVerser: input['montantVerser'],
        montantEnLettre: input['montantEnLettre'],
        typeVersement: input['typeVersement'],
        signature: input['signature'],
        created: DateTime.parse(input['created']),
      );
      try {
        await repos.versementProjets.insertData(data);
      } catch (e) {
        print(e);
        return Response(422);
      }
      return Response.ok(jsonEncode(data.toJson()));
    });

    router.put('/update-versement-projet/', (Request request) async {
      dynamic input = jsonDecode(await request.readAsString());
      final editH = VersementProjetModel.fromJson(input);
      VersementProjetModel? data =
          await repos.versementProjets.getFromId(editH.id!); 

      if (input['nomProjet'] != null) {
        data.nomProjet = input['nomProjet'];
      }
      if (input['pieceJustificative'] != null) {
        data.pieceJustificative = input['pieceJustificative'];
      }
      if (input['montantVerser'] != null) {
        data.montantVerser = input['montantVerser'];
      }
      if (input['montantEnLettre'] != null) {
        data.montantEnLettre = input['montantEnLettre'];
      }
      if (input['typeVersement'] != null) {
        data.typeVersement = input['typeVersement'];
      }
      if (input['signature'] != null) {
        data.signature = input['signature'];
      }
      if (input['created'] != null) {
        data.created = DateTime.parse(input['created']);
      }

      repos.versementProjets.update(data);
      return Response.ok(jsonEncode(data.toJson()));
    });

    router.delete('/delete-versement-projet/<id>',
        (Request request, String id) async {
      var id = request.params['id'];
      repos.versementProjets.deleteData(int.parse(id!));
      return Response.ok('Supprimée');
    });

    router.all(
      '/<ignored|.*>',
      (Request request) =>
          Response.notFound('La Page virement n\'est pas trouvé'),
    );

    return router;
  }
}
