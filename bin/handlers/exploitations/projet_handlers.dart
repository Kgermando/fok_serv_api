import 'dart:convert';

import 'package:shelf/shelf.dart';
import 'package:shelf_router/shelf_router.dart';

import '../../models/exploitations/projet_model.dart';
import '../../repository/repository.dart';

class ProjetHandlers {
  final Repository repos;

  ProjetHandlers(this.repos);

  Router get router {
    final router = Router();

    router.get('/', (Request request) async {
      List<ProjetModel> data = await repos.projets.getAllData();
      return Response.ok(jsonEncode(data));
    });

    router.get('/<id>', (Request request, String id) async {
      late ProjetModel agent;
      try {
        agent = await repos.projets.getFromId(int.parse(id));
      } catch (e) {
        print(e);
        return Response(404);
      }
      return Response.ok(jsonEncode(agent.toJson()));
    });

    router.post('/insert-new-projet', (Request request) async {
      var input = jsonDecode(await request.readAsString());

      ProjetModel data = ProjetModel(
        nomProjet: input['nomProjet'],
        coutProjet: input['coutProjet'],
        responsable: input['responsable'], 
        observation: input['observation'], 
        signature: input['signature'],
        created: DateTime.parse(input['created']),
        isSubmit: input['isSubmit'],
        typeFinancement: input['typeFinancement'],
        dateDebutEtFin: input['dateDebutEtFin'],
        statut: input['statut'],
        expire: DateTime.parse(input['expire']),
        recetteAttendus: input['recetteAttendus'],
        approbationDG: input['approbationDG'],
        motifDG: input['motifDG'],
        signatureDG: input['signatureDG'],
        approbationBudget: input['approbationBudget'],
        motifBudget: input['motifBudget'],
        signatureBudget: input['signatureBudget'],
        approbationFin: input['approbationFin'],
        motifFin: input['motifFin'],
        signatureFin: input['signatureFin'],
        approbationDD: input['approbationDD'],
        motifDD: input['motifDD'],
        signatureDD: input['signatureDD'],
        ligneBudgetaire: input['ligneBudgetaire'],
        ressource: input['ressource']

      );
      try {
        await repos.projets.insertData(data);
      } catch (e) {
        print(e);
        return Response(422);
      }
      return Response.ok(jsonEncode(data.toJson()));
    });

    router.put('/update-projet/', (Request request) async {
       dynamic input = jsonDecode(await request.readAsString());
      final editH = ProjetModel.fromJson(input);
      ProjetModel? data =
          await repos.projets.getFromId(editH.id!); 

      if (input['nomProjet'] != null) {
        data.nomProjet = input['nomProjet'];
      }
      if (input['coutProjet'] != null) {
        data.coutProjet = input['coutProjet'];
      }
      if (input['responsable'] != null) {
        data.responsable = input['responsable'];
      } 
      if (input['observation'] != null) {
        data.observation = input['observation'];
      } 
      if (input['signature'] != null) {
        data.signature = input['signature'];
      } 
      if (input['created'] != null) {
        data.created = DateTime.parse(input['created']);
      }
      if (input['isSubmit'] != null) {
        data.isSubmit = input['isSubmit'];
      }
      if (input['typeFinancement'] != null) {
        data.typeFinancement = input['typeFinancement'];
      }
      if (input['dateDebutEtFin'] != null) {
        data.dateDebutEtFin = input['dateDebutEtFin'];
      }
      if (input['statut'] != null) {
        data.statut = input['statut'];
      }
      if (input['expire'] != null) {
        data.expire = DateTime.parse(input['expire']);
      }
      if (input['recetteAttendus'] != null) {
        data.recetteAttendus = input['recetteAttendus'];
      }
      if (input['approbationDG'] != null) {
        data.approbationDG = input['approbationDG'];
      }
      if (input['motifDG'] != null) {
        data.motifDG = input['motifDG'];
      }
      if (input['signatureDG'] != null) {
        data.signatureDG = input['signatureDG'];
      }
      if (input['approbationBudget'] != null) {
        data.approbationBudget = input['approbationBudget'];
      }
      if (input['motifBudget'] != null) {
        data.motifBudget = input['motifBudget'];
      }
      if (input['signatureBudget'] != null) {
        data.signatureBudget = input['signatureBudget'];
      }
      if (input['approbationFin'] != null) {
        data.approbationFin = input['approbationFin'];
      }
      if (input['motifFin'] != null) {
        data.motifFin = input['motifFin'];
      }
      if (input['signatureFin'] != null) {
        data.signatureFin = input['signatureFin'];
      }
      if (input['approbationDD'] != null) {
        data.approbationDD = input['approbationDD'];
      }
      if (input['motifDD'] != null) {
        data.motifDD = input['motifDD'];
      }
      if (input['signatureDD'] != null) {
        data.signatureDD = input['signatureDD'];
      }
      if (input['ligneBudgetaire'] != null) {
        data.ligneBudgetaire = input['ligneBudgetaire'];
      }
      if (input['ressource'] != null) {
        data.ressource = input['ressource'];
      }

      repos.projets.update(data);
      return Response.ok(jsonEncode(data.toJson()));
    });

    router.delete('/delete-projet/<id>', (Request request, String id) async {
      var id = request.params['id'];
      repos.projets.deleteData(int.parse(id!));
      return Response.ok('Supprimée');
    });

    router.all(
      '/<ignored|.*>',
      (Request request) =>
          Response.notFound('La Page projet n\'est pas trouvé'),
    );

    return router;
  }
}
