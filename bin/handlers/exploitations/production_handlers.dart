import 'dart:convert';

import 'package:shelf/shelf.dart';
import 'package:shelf_router/shelf_router.dart';

import '../../models/exploitations/production_model.dart';
import '../../repository/repository.dart';

class ProductionHandlers {
  final Repository repos;

  ProductionHandlers(this.repos);

  Router get router {
    final router = Router();

    router.get('/', (Request request) async {
      List<ProductionModel> data = await repos.productions.getAllData();
      return Response.ok(jsonEncode(data));
    });

    router.get('/<id>', (Request request, String id) async {
      late ProductionModel data;
      try {
        data = await repos.productions.getFromId(int.parse(id));
      } catch (e) {
        print(e);
        return Response(404);
      }
      return Response.ok(jsonEncode(data.toJson()));
    });

    router.post('/insert-new-production', (Request request) async {
      var input = jsonDecode(await request.readAsString());
      ProductionModel data = ProductionModel(
        numProduction: input['numProduction'],
        idProduct: input['idProduct'],
        quantityAProduire: input['quantityAProduire'],
        quantityBonne: input['quantityBonne'],
        quantityMauvaise: input['quantityMauvaise'],
        coutProduction: input['coutProduction'],
        signature: input['signature'],
        created: DateTime.parse(input['created']),
        approbationDG: input['approbationDG'],
        motifDG: input['motifDG'],
        signatureDG: input['signatureDG'],
        approbationDD: input['approbationDD'],
        motifDD: input['motifDD'],
        signatureDD: input['signatureDD']
      );
      try {
        await repos.productions.insertData(data);
      } catch (e) {
        print(e);
        return Response(422);
      }
      return Response.ok(jsonEncode(data.toJson()));
    });

    router.put('/update-production/', (Request request) async {
      dynamic input = jsonDecode(await request.readAsString());
      final editH = ProductionModel.fromJson(input);
      ProductionModel? data = await repos.productions.getFromId(editH.id!);

      if (input['idProduct'] != null) {
        data.idProduct = input['idProduct'];
      }
      if (input['quantityBonne'] != null) {
        data.quantityBonne = input['quantityBonne'];
      }
      if (input['quantityMauvaise'] != null) {
        data.quantityMauvaise = input['quantityMauvaise'];
      }
      if (input['coutProduction'] != null) {
        data.coutProduction = input['coutProduction'];
      }
      if (input['signature'] != null) {
        data.signature = input['signature'];
      }
      if (input['created'] != null) {
        data.created = DateTime.parse(input['created']);
      }
      if (input['approbationDG'] != null) {
        data.approbationDG = input['approbationDG'];
      }
      if (input['motifDG'] != null) {
        data.motifDG = input['motifDG'];
      }
      if (input['signatureDG'] != null) {
        data.signatureDG = input['signatureDG'];
      }
      if (input['approbationDD'] != null) {
        data.approbationDD = input['approbationDD'];
      }
      if (input['motifDD'] != null) {
        data.motifDD = input['motifDD'];
      }
      if (input['signatureDD'] != null) {
        data.signatureDD = input['signatureDD'];
      }

      repos.productions.update(data);
      return Response.ok(jsonEncode(data.toJson()));
    });

    router.delete('/delete-production/<id>',
        (Request request, String id) async {
      var id = request.params['id'];
      repos.productions.deleteData(int.parse(id!));
      return Response.ok('Supprimée');
    });

    router.all(
      '/<ignored|.*>',
      (Request request) =>
          Response.notFound('La Page production n\'est pas trouvé'),
    );
    return router;
  }
}
