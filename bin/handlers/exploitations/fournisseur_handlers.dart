import 'dart:convert';

import 'package:shelf/shelf.dart';
import 'package:shelf_router/shelf_router.dart';

import '../../models/exploitations/fourniseur_model.dart';
import '../../repository/repository.dart';

class FournisseurHandlers {
    final Repository repos;

  FournisseurHandlers(this.repos);

  Router get router {
    final router = Router();

    router.get('/', (Request request) async {
      List<FournisseurModel> data = await repos.fournisseurs.getAllData();
      return Response.ok(jsonEncode(data));
    });

    router.get('/<id>', (Request request, String id) async {
      late FournisseurModel data;
      try {
        data = await repos.fournisseurs.getFromId(int.parse(id));
      } catch (e) {
        print(e);
        return Response(404);
      }
      return Response.ok(jsonEncode(data.toJson()));
    });

    router.post('/insert-new-fournisseur', (Request request) async {
      var input = jsonDecode(await request.readAsString());
      FournisseurModel data = FournisseurModel(
        reference: input['reference'],
        quantity: input['quantity'],
        designation: input['designation'],
        prixUnitaire: input['prixUnitaire'],
        fournisseur: input['fournisseur'],
        signature: input['signature'],
        created: DateTime.parse(input['created'])
      );
      try {
        await repos.fournisseurs.insertData(data);
      } catch (e) {
        print(e);
        return Response(422);
      }
      return Response.ok(jsonEncode(data.toJson()));
    });

    router.put('/update-fournisseur/', (Request request) async {
      dynamic input = jsonDecode(await request.readAsString());
      final editH = FournisseurModel.fromJson(input);
      FournisseurModel? data = await repos.fournisseurs.getFromId(editH.id!);

      if (input['reference'] != null) {
        data.reference = input['reference'];
      }
      if (input['quantity'] != null) {
        data.quantity = input['quantity'];
      }
      if (input['designation'] != null) {
        data.designation = input['designation'];
      }
      if (input['prixUnitaire'] != null) {
        data.prixUnitaire = input['prixUnitaire'];
      }
      if (input['fournisseur'] != null) {
        data.fournisseur = input['fournisseur'];
      }
      if (input['signature'] != null) {
        data.signature = input['signature'];
      }
      if (input['created'] != null) {
        data.created = DateTime.parse(input['created']);
      }

      repos.fournisseurs.update(data);
      return Response.ok(jsonEncode(data.toJson()));
    });

    router.delete('/delete-fournisseur/<id>',
        (Request request, String id) async {
      var id = request.params['id'];
      repos.fournisseurs.deleteData(int.parse(id!));
      return Response.ok('Supprimée');
    });

    router.all(
      '/<ignored|.*>',
      (Request request) =>
          Response.notFound('La Page fournisseur n\'est pas trouvé'),
    );
    return router;
  }
}