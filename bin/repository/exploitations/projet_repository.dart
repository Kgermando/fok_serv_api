import 'package:postgres/postgres.dart';

import '../../models/exploitations/projet_model.dart';

class ProjetRepository {
  final PostgreSQLConnection executor;
  final String tableName;

  ProjetRepository(this.executor, this.tableName);

  Future<List<ProjetModel>> getAllData() async {
    var data = <ProjetModel>{};

    var querySQL = "SELECT * FROM $tableName ORDER BY \"created\" DESC;";
    List<List<dynamic>> results = await executor.query(querySQL);
    for (var row in results) {
      data.add(ProjetModel.fromSQL(row));
    }
    return data.toList();
  }

  Future<void> insertData(ProjetModel data) async {
    await executor.transaction((ctx) async {
      await ctx.execute(
        "INSERT INTO $tableName (id, nom_projet, cout_projet, responsable,"
        "objectifs, description, responsabilite,"
        "communication, processus_verification, probleme_potient_et_risque,"
        "date_debut_et_fin, budget_detail, recette_attendus,"
        "type_financement, observation, signature, created_ref, created)"
        "VALUES (nextval('projets_id_seq'), @1, @2, @3, @4, @5, @6,"
        "@7, @8, @9, @10, @11, @12, @13, @14, @15, @16, @17)",
        substitutionValues: {
          '1': data.nomProjet,
          '2': data.coutProjet,
          '3': data.responsable,
          '4': data.objectifs,
          '5': data.description, 
          '6': data.responsabilite,
          '7': data.communication,
          '8': data.processusVerification,
          '9': data.problemePotientEtRisque,
          '10': data.dateDebutEtFin,
          '11': data.budgetDetail,
          '12': data.recetteAttendus,
          '13': data.typeFinancement,
          '14': data.observation,
          '15': data.signature,
          '16': data.createdRef,
          '17': data.created
        });
    });
  }

  Future<void> update(ProjetModel data) async {
   await executor.transaction((conn) async {
     await conn.query(
      "UPDATE $tableName"
      "SET nom_projet = @1, cout_projet = @2 responsable = @3, objectifs = @4,"
      "description = @5, responsabilite = @6,"
      "communication = @7, processus_verification = @8, probleme_potient_et_risque = @9,"
      "date_debut_et_fin = @10, budget_detail = @11, recette_attendus = @12,"
      "type_financement = @13, observation = @14, signature = @15,"
      "created_ref = @16, created = @17 WHERE id = @18",
      substitutionValues: {
        '1': data.nomProjet,
        '2': data.coutProjet,
        '3': data.responsable,
        '4': data.objectifs,
        '5': data.description,
        '6': data.responsabilite,
        '7': data.communication,
        '8': data.processusVerification,
        '9': data.problemePotientEtRisque,
        '10': data.dateDebutEtFin,
        '11': data.budgetDetail,
        '12': data.recetteAttendus,
        '13': data.typeFinancement,
        '14': data.observation,
        '15': data.signature,
        '16': data.createdRef,
        '17': data.created,
        '18': data.id
      });
    });
  }

  deleteData(int id) async {
    try {
      await executor.transaction((conn) async {
        // ignore: unused_local_variable
        var result = await conn.execute('DELETE FROM $tableName WHERE id=$id;');
      });
    } catch (e) {
      'erreur $e';
    }
  }

  Future<ProjetModel> getFromId(int id) async {
    var data =
        await executor.query("SELECT * FROM  $tableName WHERE \"id\" = '$id'");
    return ProjetModel(
      id: data[0][0],
      nomProjet: data[0][1],
      coutProjet: data[0][2],
      responsable: data[0][3],
      objectifs: data[0][4],
      description: data[0][5],
      responsabilite: data[0][6],
      communication: data[0][7],
      processusVerification: data[0][8],
      problemePotientEtRisque: data[0][9],
      dateDebutEtFin: data[0][10],
      budgetDetail: data[0][11],
      recetteAttendus: data[0][12],
      typeFinancement: data[0][13],
      observation: data[0][14],
      signature: data[0][15],
      createdRef: data[0][16],
      created: data[0][17]
    );
  }
}
