import 'package:postgres/postgres.dart';

import '../../models/exploitations/rapport_model.dart';

class RapportRepository {
  final PostgreSQLConnection executor;
  final String tableName;

  RapportRepository(this.executor, this.tableName);

  Future<List<RapportModel>> getAllData() async {
    var data = <RapportModel>{};

    var querySQL = "SELECT * FROM $tableName ORDER BY \"created\" DESC;";
    List<List<dynamic>> results = await executor.query(querySQL);
    for (var row in results) {
      data.add(RapportModel.fromSQL(row));
    }
    return data.toList();
  }

  Future<void> insertData(RapportModel rapportModel) async {
    var nomProjet = rapportModel.nomProjet;
    var numeroTache = rapportModel.numeroTache;
    var rapport = rapportModel.rapport;
    var signature = rapportModel.signature;
    var created = rapportModel.created;

    await executor.transaction((ctx) async {
      // ignore: unused_local_variable
      var result = await ctx.execute(
          "INSERT INTO $tableName VALUES (nextval('rapports_id_seq'), '$nomProjet',"
          "'$numeroTache', '$rapport', '$signature', '$created');");
    });
  }

  Future<void> update(RapportModel rapportModel) async {
    var id = rapportModel.id;
    var nomProjet = rapportModel.nomProjet;
    var numeroTache = rapportModel.numeroTache;
    var rapport = rapportModel.rapport;
    var signature = rapportModel.signature;
    var created = rapportModel.created;

    await executor.transaction((conn) async {
      // ignore: unused_local_variable
      var result = await conn.execute(
          "UPDATE $tableName SET \"nomProjet\"='$nomProjet', "
          "\"numeroTache\"='$numeroTache', \"rapport\"='$rapport', \"signature\"='$signature',"
          "\"created\"='$created' WHERE id=$id;");
    });
  }

  deleteData(int id) async {
    try {
      await executor.transaction((conn) async {
        // ignore: unused_local_variable
        var result = await conn.execute('DELETE FROM $tableName WHERE id=$id;');
      });
    } catch (e) {
      'erreur $e';
    }
  }

  Future<RapportModel> getFromId(int id) async {
    var data =
        await executor.query("SELECT * FROM  $tableName WHERE \"id\" = '$id'");
    return RapportModel(
      id: data[0][0],
      nomProjet: data[0][1],
      numeroTache: data[0][2],
      rapport: data[0][3],
      signature: data[0][4],
      created: data[0][5]
    );
  }
}