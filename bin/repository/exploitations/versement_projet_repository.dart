import 'package:postgres/postgres.dart';

import '../../models/exploitations/versement_projet_model.dart';

class VersementProjetRepository {
  final PostgreSQLConnection executor;
  final String tableName;

  VersementProjetRepository(this.executor, this.tableName);

  Future<List<VersementProjetModel>> getAllData() async {
    var data = <VersementProjetModel>{};

    var querySQL = "SELECT * FROM $tableName ORDER BY \"created\" DESC;";
    List<List<dynamic>> results = await executor.query(querySQL);
    for (var row in results) {
      data.add(VersementProjetModel.fromSQL(row));
    }
    return data.toList();
  }

  Future<void> insertData(VersementProjetModel data) async {
    await executor.transaction((ctx) async {
      await ctx.execute(
        "INSERT INTO $tableName (id, nom_projet, piece_justificative,"
        "montant_verser, montant_en_lettre, type_versement, signature, created)"
        "VALUES (nextval('versement_projets_id_seq'), @1, @2, @3, @4, @5, @6, @7)",
        substitutionValues: {
          '1': data.nomProjet,
          '2': data.pieceJustificative,
          '3': data.montantVerser,
          '4': data.montantEnLettre,
          '5': data.typeVersement,
          '6': data.signature,
          '7': data.created
        });
    });
  }

  Future<void> update(VersementProjetModel data) async {
     await executor.query("""UPDATE $tableName
          SET nom_projet = @1, piece_justificative = @2, montant_verser = @3,
          montant_en_lettre = @4, type_versement = @5, signature = @6,
          created = @7 WHERE id = @8""", substitutionValues: {
      '1': data.nomProjet,
      '2': data.pieceJustificative,
      '3': data.montantVerser,
      '4': data.montantEnLettre,
      '5': data.typeVersement,
      '6': data.signature,
      '7': data.created,
      '8': data.id
    });
  }

  deleteData(int id) async {
    try {
      await executor.transaction((conn) async {
        // ignore: unused_local_variable
        var result = await conn.execute('DELETE FROM $tableName WHERE id=$id;');
      });
    } catch (e) {
      'erreur $e';
    }
  }

  Future<VersementProjetModel> getFromId(int id) async {
    var data =
        await executor.query("SELECT * FROM  $tableName WHERE \"id\" = '$id'");
    return VersementProjetModel(
      id: data[0][0],
      nomProjet: data[0][1],
      pieceJustificative: data[0][2],
      montantVerser: data[0][3],
      montantEnLettre: data[0][4],
      typeVersement: data[0][5],
      signature: data[0][6],
      created: data[0][7]
    );
  }
}