import 'package:postgres/postgres.dart';

import '../../models/exploitations/production_model.dart'; 

class ProductionRepository {
  final PostgreSQLConnection executor;
  final String tableName;

  ProductionRepository(this.executor, this.tableName);

  Future<List<ProductionModel>> getAllData() async {
    var data = <ProductionModel>{};

    var querySQL = "SELECT * FROM $tableName;";
    List<List<dynamic>> results = await executor.query(querySQL);
    for (var row in results) {
      data.add(ProductionModel.fromSQL(row));
    }
    return data.toList();
  }

  Future<void> insertData(ProductionModel data) async {
    await executor.transaction((ctx) async {
      await ctx.execute(
          "INSERT INTO $tableName (id, num_production, id_product, quantity_a_produire,"
          "quantity_bonne, quantity_mauvaise, cout_production, signature, created,"
          "approbation_dg, motif_dg, signature_dg, approbation_dd, motif_dd, signature_dd)"
          "VALUES (nextval('productions_id_seq'), @1, @2, @3, @4, @5, @6, @7,"
          "@8, @9, @10, @11, @12, @13, @14)",
          substitutionValues: {
            '1': data.numProduction,
            '2': data.idProduct,
            '3': data.quantityAProduire,
            '4': data.quantityBonne,
            '5': data.quantityMauvaise,
            '6': data.coutProduction,
            '7': data.signature,
            '8': data.created,
            '9': data.approbationDG,
            '10': data.motifDG,
            '11': data.signatureDG,
            '12': data.approbationDD,
            '13': data.motifDD,
            '14': data.signatureDD
          });
    });
  }

  Future<void> update(ProductionModel data) async {
    await executor.query("""UPDATE $tableName
      SET num_production = @1, id_product = @2, quantity_a_produire = @3,
      quantity_bonne = @4, quantity_mauvaise = @5,  cout_production = @6, 
      signature = @7, created = @8, approbation_dg = @9, motif_dg = @10,
      signature_dg = @11, approbation_dd = @12, motif_dd = @13, signature_dd = @14 WHERE id = @15""",
        substitutionValues: {
          '1': data.numProduction,
          '2': data.idProduct,
          '3': data.quantityAProduire,
          '4': data.quantityBonne,
          '5': data.quantityMauvaise,
          '6': data.coutProduction,
          '7': data.signature,
          '8': data.created,
          '9': data.approbationDG,
          '10': data.motifDG,
          '11': data.signatureDG,
          '12': data.approbationDD,
          '13': data.motifDD,
          '14': data.signatureDD,
          '15': data.id
        });
  }

  deleteData(int id) async {
    try {
      await executor.transaction((conn) async {
        // ignore: unused_local_variable
        var result = await conn.execute('DELETE FROM $tableName WHERE id=$id;');
      });
    } catch (e) {
      'erreur $e';
    }
  }

  Future<ProductionModel> getFromId(int id) async {
    var data =
        await executor.query("SELECT * FROM  $tableName WHERE \"id\" = '$id'");
    return ProductionModel(
      id: data[0][0],
      numProduction: data[0][1],
      idProduct: data[0][2],
      quantityAProduire: data[0][3],
      quantityBonne: data[0][4],
      quantityMauvaise: data[0][5],
      coutProduction: data[0][6],
      signature: data[0][7],
      created: data[0][8],
      approbationDG: data[0][9],
      motifDG: data[0][10],
      signatureDG: data[0][11],
      approbationDD: data[0][12],
      motifDD: data[0][13],
      signatureDD: data[0][14]
    );
  }
}
