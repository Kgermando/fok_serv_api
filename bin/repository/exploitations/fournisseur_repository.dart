import 'package:postgres/postgres.dart';

import '../../models/exploitations/fourniseur_model.dart';
 

class FournisseurRepository {
  final PostgreSQLConnection executor;
  final String tableName;

  FournisseurRepository(this.executor, this.tableName);

  Future<List<FournisseurModel>> getAllData() async {
    var data = <FournisseurModel>{};

    var querySQL = "SELECT * FROM $tableName;";
    List<List<dynamic>> results = await executor.query(querySQL);
    for (var row in results) {
      data.add(FournisseurModel.fromSQL(row));
    }
    return data.toList();
  }

  Future<void> insertData(FournisseurModel data) async {
    await executor.transaction((ctx) async {
      await ctx.execute(
        "INSERT INTO $tableName (id, reference, quantity, designation,"
        "prix_unitaire, fournisseur, signature, created, unite)"
        "VALUES (nextval('fournisseurs_id_seq'), @1, @2, @3, @4, @5, @6, @7, @8)",
        substitutionValues: {
          '1': data.reference,
          '2': data.quantity,
          '3': data.designation,
          '4': data.prixUnitaire,
          '5': data.fournisseur,
          '6': data.signature,
          '7': data.created,
          '8': data.unite
        });
    });
  }

  Future<void> update(FournisseurModel data) async {
    await executor.query("""UPDATE $tableName
          SET reference = @1, quantity = @2, designation = @3, prix_unitaire = @4,
          fournisseur = @5, signature = @6, created = @7, unite = @8 WHERE id = @9""",
        substitutionValues: {
          '1': data.reference,
          '2': data.quantity,
          '3': data.designation,
          '4': data.prixUnitaire,
          '5': data.fournisseur,
          '6': data.signature,
          '7': data.created,
          '8': data.unite,
          '9': data.id
        });
  }

  deleteData(int id) async {
    try {
      await executor.transaction((conn) async {
        // ignore: unused_local_variable
        var result = await conn.execute('DELETE FROM $tableName WHERE id=$id;');
      });
    } catch (e) {
      'erreur $e';
    }
  }

  Future<FournisseurModel> getFromId(int id) async {
    var data =
        await executor.query("SELECT * FROM  $tableName WHERE \"id\" = '$id'");
    return FournisseurModel(
      id: data[0][0],
      reference: data[0][1],
      quantity: data[0][2],
      designation: data[0][3],
      prixUnitaire: data[0][4],
      fournisseur: data[0][5],
      signature: data[0][6],
      created: data[0][7],
      unite: data[0][8]
    );
  }
}
